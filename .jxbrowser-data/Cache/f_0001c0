<!DOCTYPE html><html><head>
<meta charset="UTF-8">
<title>Bluetooth low energy Fundamentals</title>
<link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/fonts/ubuntu-regular-woff.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/fonts/glyphicons-halflings-regular.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/themes/united2.min.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/themes/bootstrap-responsive.min.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/strapdown.css"><link rel="shortcut icon" type="image/x-icon" href="../../../.metadata/favicon.ico"></head>

<!-- START PRE -->






<!-- END PRE -->

<body style=""><div class="container"><nav class="navbar navbar-default navbar-static-top"><div class="container-fluid"> <div class="navbar-header">  <div id="headline" class="navbar-brand">Bluetooth low energy Fundamentals</div> </div> </div></nav><div class="container"><div class="row row-offcanvas row-offcanvas-left"><div class="col-xs-12 col-sm-9" id="content"><h1 class="body-heading" id="introduction">Introduction<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#introduction"></a></h1><p>This workshop is an introduction to the <em>Bluetooth®</em> low energy part of the
SimpleLink™ CC26x2 and CC13x2 Software Development Kits (SDK). The 4 tasks in
this lab session are targeted to be completed within a 2h time frame. An
intermediate level of knowledge of the C programming language and some
experience with embedded software development is needed to be able to complete
the tasks.</p>
<p>This lab session uses the SimpleLink CC26X2R1 wireless MCU LaunchPad
development kit to demonstrate the tasks in this module. The first task shows
how to download a project to the device and run it, and the subsequent tasks
will explore the wireless BLE interface and make some small changes to the BLE
application.</p>
<p>For the latter tasks, either a Bluetooth low energy enabled cell-phone or an
evaluation kit running the TI <code>host_test</code> Sample Application is required. The
advantage of using <code>host_test</code> is that the TI tools, such as <code>BTool</code>, can be used.</p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Kit and SDK compatibility
</span></h4>
<p>Both the <a href="http://dev.ti.com/launchxl-cc26x2r1">LAUNCHXL-CC26x2R1</a> and
<a href="http://dev.ti.com/launchxl-cc1352r1">LAUNCHXL-CC1352R1</a> kits support the
Bluetooth low energy stacks included their respective software development
kits. In this lab we will use the CC26x2R Launchpad and CC26x2 SDK as
examples, but the same applies for both.</p>
</div>
<p>It is recommended to read the
<span class="hinted" data-placement="auto top" data-toggle="tooltip" data-html="true" data-original-title="&lt;p&gt;When reading older TI documentation, you may see references to the TI BLE Software Developer's Guide. This was renamed to the TI BLE-Stack User's Guide in conjunction with the added support of BLE 5&lt;/p&gt;
"><a href="http://dev.ti.com/tirex/#/?link=Software%2FSimpleLink%20CC26X2%20SDK%2FDocuments%2FBLE5-Stack%2FBLE5-Stack%20User's%20Guide">TI BLE-Stack User's Guide</a></span>
alongside this lab for details and further information. Some references will
also be made to this document.</p>
<h1 class="body-heading" id="prerequisites">Prerequisites<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#prerequisites"></a></h1><h3 class="body-heading" id="software-for-desktop-development">Software for desktop development<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#software-for-desktop-development"></a></h3><ul>
<li><a href="http://processors.wiki.ti.com/index.php/Download_CCS">CCS 8.1+</a> installed with
support for CC13xx/CC26xx devices</li>
<li><a href="http://www.ti.com/tool/SIMPLELINK-CC26X2-SDK">SimpleLink CC26x2 SDK 2.20</a> or <a href="http://www.ti.com/tool/SIMPLELINK-CC13X2-SDK">SimpleLink CC13x2 SDK 2.20</a></li>
</ul>
<p>For testing, a Bluetooth client application is required:</p>
<ul>
<li>BTool (located in tools-&gt;ble5stack directory of the SimpleLink CC26x2 SDK
installation) <strong>OR</strong></li>
<li>Bluetooth mobile apps:<ul>
<li>Android: <strong><em>TI SimpleLink Starter</em></strong> - available on the
<a href="https://play.google.com/store/apps/details?id=com.ti.ble.simplelinkstarter">Google Play store</a></li>
<li>iOS: <strong><em>TI SimpleLink Starter</em></strong> - available on the
<a href="https://itunes.apple.com/us/app/ti-simplelink-starter/id1037784820">App Store</a></li>
</ul>
</li>
</ul>
<div class="bs-callout bs-callout-danger "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Compiler Support
</span></h4>
<p>See SimpleLink CC26X2 SDK Release notes for supported TI ARM Compiler versions.
Compatibility with other TI ARM Compiler versions in CCS has not been tested and
use of other compiler versions may result in undefined behavior.
Refer to the <a href="http://dev.ti.com/tirex/#/?link=Software%2FSimpleLink%20CC26X2%20SDK%2FDocuments%2FQuick%20Start%20Guide">SDK QuickStart Guide</a> → Introduction to the SimpleLink CC26x2 SDK → IDE → CCS → Step 4.
for the procedure to install other
compiler versions.</p>
</div>
<h3 class="body-heading" id="hardware">Hardware<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#hardware"></a></h3><ul>
<li>SimpleLink CC26x2R1 LaunchPad - <a href="http://www.ti.com/tool/LAUNCHXL-CC26X2R1">Ordering</a> / <a href="http://dev.ti.com/launchxl-cc26x2r1">QuickStart</a></li>
<li>SimpleLink CC1352R1 LaunchPad - <a href="http://www.ti.com/tool/LAUNCHXL-CC1352R1">Ordering</a> / <a href="http://dev.ti.com/launchxl-cc1352r1">QuickStart</a></li>
</ul>
<p>For testing:</p>
<ul>
<li>Additional CC26xx LaunchPad to run <code>host_test</code> <strong>OR</strong></li>
<li>Mobile device for testing</li>
</ul>
<h3 class="body-heading" id="recommended-reading">Recommended reading<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#recommended-reading"></a></h3><ul>
<li><a href="http://dev.ti.com/tirex/#/?link=Software%2FSimpleLink%20CC26X2%20SDK%2FDocuments%2FBLE5-Stack%2FBLE5-Stack%20Quick%20Start%20Guide">TI BLE5-Stack Quick Start</a></li>
<li>The Platform Chapter of the <a href="http://dev.ti.com/tirex/#/?link=Software%2FSimpleLink%20CC26X2%20SDK%2FDocuments%2FBLE5-Stack%2FBLE5-Stack%20User's%20Guide">TI BLE5-Stack User's Guide</a></li>
</ul>
<h1 class="body-heading" id="getting-started-ndash-desktop">Getting started – Desktop<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#getting-started-ndash-desktop"></a></h1><h2 class="body-heading" id="install-the-software">Install the software<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#install-the-software"></a></h2><div class="panel panel-default">  <div class="panel-body"><ul class="nav nav-tabs nav-justified"><li class="active"><a data-toggle="tab" href="#tab1-0">CCS Resource Explorer</a></li><li><a data-toggle="tab" href="#tab1-1">Installer</a></li><li><a data-toggle="tab" href="#tab1-2">Online Resource Explorer</a></li></ul><div style="margin-top: 1em"></div><div class="tab-content"><div id="tab1-0" class="tab-pane in active"><p>Open Resource Explorer via <strong><em>View → Resource Explorer</em></strong> and find the
SDK you want to install.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ccs-tirex-import.png" alt="" class="img-responsive"></div><p></p>
<p>On the right side, you will see a download icon. Click this to install the SDK
and all its dependencies.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ccs-tirex-download.png" alt="" class="img-responsive"></div><p></p>
</div><div id="tab1-1" class="tab-pane "><ol>
<li><p>Download the offline installer from the SDK links above under <code>Prerequisites</code></p>
</li>
<li><p>Run the SimpleLink CC26X2 SDK installer: <code>simplelink_cc26x2_sdk_2_20_00_xx.exe</code>.
These instructions assume you have installed to the default directory: <code>C:\ti\</code></p>
</li>
</ol>
</div><div id="tab1-2" class="tab-pane "><p>In this case you don't need to install anything on your PC. You can navigate
to the project within TI-Rex and import it into CCS Cloud.</p>
<ul>
<li><p><a href="https://dev.ti.com/tirex/#/?link=Software%2FSimpleLink%20CC26X2%20SDK%2FExamples%2FDevelopment%20Tools%2FCC26x2R%20LaunchPad%2Fble5stack%2Fproject_zero%2FTI-RTOS%2FCCS%20Compiler%2Fproject_zero_app">Software/SimpleLink CC26X2 SDK/Examples/../CC26x2R LaunchPad/ble5stack/project_zero/../project_zero_app</a></p>
</li>
<li><p><a href="https://dev.ti.com/tirex/#/?link=Software%2FSimpleLink%20CC13x2%20SDK%2FExamples%2FDevelopment%20Tools%2FCC1352R%20LaunchPad%2Fble5stack%2Fproject_zero%2FTI-RTOS%2FCCS%20Compiler%2Fproject_zero_app">Software/SimpleLink CC13x2 SDK/Examples/../CC1352R LaunchPad/ble5stack/project_zero/../project_zero_app</a></p>
</li>
</ul>
<p>Then click the Cloud Import button: </p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ccs_cloud_import.png" alt="" class="img-responsive"></div><p></p>
<p>Note that this will not install BTool on your computer.</p>
</div></div></div></div><p>This gives you:</p>
<ul>
<li>The SimpleLink CC26X2 SDK at <code>C:\ti\simplelink_cc26x2_sdk_2_20_00_xx</code></li>
<li>BTool accessible via the tools-&gt;ble5stack-&gt;btool directory of the SimpleLink
CC26X2 SDK install directory.</li>
</ul>
<h1 class="body-heading" id="task-1-ndash-run-projectzero-project">Task 1 – Run ProjectZero project<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-1-ndash-run-projectzero-project"></a></h1><p>The first task is to simply run the Project Zero example project on the CC26X2R1
LaunchPad and verify that the project runs as intended.</p>
<div class="bs-callout bs-callout-danger "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Over the Air Download and the BIM project
</span></h4>
<p>Please note that this project is configured for updates over the air (OAD) by
default. This means that you can upload a new version or a totally different
project to the LaunchPad from your mobile phone.</p>
<p>It also means that the project is compiled and linked in such a way that you
<strong>MUST</strong> have the <code>cc26xxr1lp_bim_offchip</code> project present in the internal
flash of the device first for the project to work correctly. More on this
later.</p>
</div>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Boot Image Manager
</span></h4>
<div class="alert alert-info float-right"><p> <strong>Customer Configuration (CCFG)</strong></p>
<p>This configuration section is used to tell the device how to behave after
boot, such as where the reset vector is, what the clock sources are, etc.</p>
</div>
<p>The <strong>Boot Image Manager (BIM)</strong> project is placed at the last sector of the
internal Flash along with the CCFG section and is responsible for loading new
images (if any) from the external flash, and to launch the internal image. In
our case the internal image is <code>Project Zero</code>.</p>
<p>If BIM is not present, debugging and starting Project Zero from the IDE will
normally work, because the IDE overrides the boot configuration and jumps
straight to where it thinks the project start address is. After a reset
however, the device will not know what to do unless BIM is already present.</p>
<p>Note that when working on an OAD enabled project, you only need to download
BIM once.</p>
</div>
<h2 class="body-heading" id="import-in-ccs-desktop">Import in CCS Desktop<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#import-in-ccs-desktop"></a></h2><p>Open Code Composer Studio and import the Project Zero app and stack library
projects:</p>
<ul>
<li>Open TI Resource Explorer (View → Resource Explorer) or go to <a href="http://dev.ti.com/tirex/#/">http://dev.ti.com/tirex/#/</a></li>
<li>In the navigation panel on the left side, expand to find Project Zero in the SimpleLink CC26X2 SDK.<ul>
<li><em>Software → SimpleLink CC26X2 SDK - v:2.20.00.xx → Examples → Development Tools → CC26x2R LaunchPad → ble5stack →
project_zero → TI-RTOS → CCS Compiler → project_zero_app</em></li>
</ul>
</li>
</ul>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/directory_structure.png" alt="Directory Structure" class="img-responsive"></div><p></p>
<ul>
<li><p>Click the project folder marked above. Import the project into your workspace by clicking the CCS
logo in the top right, in the right hand window.</p>
<ul>
<li><em>Using CCS Desktop, import into workspace</em> <div class="modal-pop" style="cursor:zoom-in;"><img src="resources/resource_explorer_import_desktop.png" alt="Resource Explorer" class="img-responsive"></div></li>
<li><em>Using CCS Cloud, import into CCS Cloud workspace in the browser</em> <div class="modal-pop" style="cursor:zoom-in;"><img src="resources/resource_explorer_import_cloud.png" alt="Resource Explorer" class="img-responsive"></div></li>
</ul>
</li>
<li><p>The projects will appear in your Project Explorer
window as shown below:</p>
</li>
</ul>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/project_imported.png" alt="Imported" class="img-responsive"></div><p></p>
<h2 class="body-heading" id="connect-cc26x2r-launchpad">Connect CC26X2R LaunchPad<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#connect-cc26x2r-launchpad"></a></h2><p>Start by making sure your kit is assembled, turned on, and is connected to the
PC via the USB cable.</p>
<p>When the CC26X2R Launchpad is connected, the Windows Device Manager
(Start → Control Panel → Device Manager, or <kbd>Win+X, M</kbd> on Windows 10) should show you the following devices
connected:
</p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/dev_mgr_xds110.png" alt="Device Manager" class="img-responsive"></div><p></p>
<p>The <code>Application/User UART</code> serial port is used for application output in this
example.</p>
<h2 class="body-heading" id="configure-the-debugger-connection">Configure the debugger connection<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#configure-the-debugger-connection"></a></h2><p>The correct debugger type (XDS110) is selected by default when you import the
project.</p>
<h2 class="body-heading" id="connect-a-terminal-program">Connect a terminal program<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#connect-a-terminal-program"></a></h2><p>To see the serial output from the kit it is necessary to use a terminal emulator.
Start this up now, when you've confirmed that the debugger connection to the
device works. There are several options:</p>
<ul>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY</a></li>
<li><a href="https://osdn.net/projects/ttssh2/releases/">Tera Term</a></li>
<li><a href="http://sourceforge.net/projects/realterm/">RealTerm</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/terminal-basics/command-line-windows-mac-linux">Windows PowerShell</a></li>
<li>Or even just going to the command prompt and typing for example <code>type COM4:</code>.<ul>
<li>Type <code>help mode</code> to learn how to set the port parameters.</li>
</ul>
</li>
</ul>
<ol>
<li>Start your terminal program</li>
<li>Choose 115200 baud as the speed, 8 bit data, 1 stop bit, no parity, no flow control.</li>
<li>Open the serial port</li>
</ol>
<h2 class="body-heading" id="build-the-projects-and-flash-the-device">Build the projects and Flash the device<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#build-the-projects-and-flash-the-device"></a></h2><h3 class="body-heading" id="cc26xxr1lp_bim_offchip">cc26xxr1lp_bim_offchip<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#cc26xxr1lp_bim_offchip"></a></h3><ol>
<li>Build the BIM project by right-clicking on it and selecting <code>Build Project</code>.<ul>
<li>Alternatively build all the projects by pressing <kbd>Ctrl + B</kbd>.</li>
</ul>
</li>
<li>Program the project by right clicking on it and selecting <code>Debug As -&gt; Code Composer Debug Session</code></li>
<li>When the IDE is halted at the <code>bim_main</code> function, terminate debugging session by clicking <kbd>Ctrl + F2</kbd> or the square red stop icon.</li>
</ol>
<h3 class="body-heading" id="ble5_project_zero_cc26x2r1lp_app">ble5_project_zero_cc26x2r1lp_app<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#ble5_project_zero_cc26x2r1lp_app"></a></h3><ol>
<li>Build the <code>ble5_project_zero_cc26x2r1lp_app</code> project by right-clicking on it and selecting <code>Build Project</code>.<ul>
<li>This will automatically build the stack library project for you first.</li>
</ul>
</li>
<li>Download and run the project by either<ul>
<li>Right clicking on it and selecting <code>Debug As -&gt; Code Composer Debug Session</code>, or</li>
<li>Pressing <kbd>F11</kbd> when the project is marked as active (see image above)</li>
<li>Clicking the green bug icon in the toolbar</li>
</ul>
</li>
<li>When the project is downloaded and halted at <code>main()</code>, press <kbd>F8</kbd> or the Play/Pause button to start executing the code.</li>
</ol>
<p>After the application runs you should observe something like the following in
your terminal application:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/boot.gif" alt="Putty initial" class="img-responsive"></div><p></p>
<p>This shows the user application initializing the three services LED, Button and
Data, and set initial values for the characteristics in those services. Finally,
callbacks are received from the stack that the device is ready and has started
advertising its presence.</p>
<p>Take a note of your device address for later use.</p>
<h1 class="body-heading" id="task-2-connect-and-navigate-exposed-services">Task 2 - Connect and navigate exposed services<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-2-connect-and-navigate-exposed-services"></a></h1><p>In order to interact with the Bluetooth low energy device you will need to use
something to act as a Central device towards it.</p>
<p>There are many mobile applications that can serve this purpose. We will show
instructions using the TI SimpleLink Starter applications available for both
iOS and Android.</p>
<p>In addition to these mobile apps, Texas Instruments provides a couple of PC
tools for this, which in turn communicate over a serial port with special
firmware loaded onto a separate CC26xx device. The serial commands conform to
the <span class="hinted" data-placement="auto top" data-toggle="tooltip" data-html="true" data-original-title="&lt;p&gt;&lt;strong&gt;Host-Controller Interface&lt;/strong&gt;,&lt;br/&gt;&lt;br/&gt;A serial command format
originally designed for the Bluetooth Host device to communicate with the
Controller device. In &lt;code&gt;host_test&lt;/code&gt; and the other BLE example projects, the Host
and Controller is on the same chip and the HCI commands are extended with some
extra &lt;em&gt;Vendor Specific&lt;/em&gt; commands that interface with the on-chip host stack.&lt;/p&gt;
">HCI</span>
standard as defined by the Bluetooth SIG, and allows control of the Host
layers such as GATT, GAP and Security Manager in addition to the bare-metal
Link Layer commands required by the HCI specification.</p>
<p>Tools like BTool use this interface to connect to and interact with other BLE devices.</p>
<p>Select your preferred method of connecting to Project Zero by expanding the
boxes below.</p>
<div class="panel panel-default">  <div class="panel-body"><ul class="nav nav-tabs nav-justified"><li class="active"><a data-toggle="tab" href="#tab2-0">BTool</a></li><li><a data-toggle="tab" href="#tab2-1">iOS</a></li><li><a data-toggle="tab" href="#tab2-2">Android</a></li></ul><div style="margin-top: 1em"></div><div class="tab-content"><div id="tab2-0" class="tab-pane in active"><p>First, you will program a second board with the <code>host_test</code> project. The <code>host_test</code>
project allows a user to call most of the GAP, GATT and ATT functions of the BLE
stack via a serial interface.</p>
<p>0 – <strong>Program HostTest onto a Launchpad</strong></p>
<p>Here you have two options:</p>
<ul>
<li><p>Build <a href="http://dev.ti.com/tirex/#/
?link=Software%2FSimpleLink%20CC26X2%20SDK%2FExamples%2FDevelopment%20Tools%2F
CC26x2R%20LaunchPad%2Fble5stack%2Fhost_test">ble5 host_test</a> from the BLE5 examples folder and
program it onto a device, or</p>
</li>
<li><p>Download
<a href="http://processors.wiki.ti.com/index.php/Category:CCS_UniFlash">UniFlash</a> for
your platform and program in the prebuilt hexfile in <nobr><code>[sdk]examples/rtos
/[board]/ble5stack/hexfiles/[device]/ble5_host_test_[board].hex</code></nobr></p>
</li>
</ul>
<p>1 – <strong>Start BTool</strong></p>
<p>BTool is a PC Tool that uses the HCI Vendor Specific commands to act as a
Bluetooth low energy device. BTool can be found in the <code>tools -&gt; ble5stack -&gt; btool</code>
folder of your SimpleLink CC26X2 SDK installation. It is recommended to run BTool
by clicking Run_BTool.bat.</p>
<p>When BTool opens it will prompt you to select the Serial Port your <code>host_test</code>
device is connected to as show in the picture below.
</p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_serial_port_config.png" alt="BTool Serial Port Config" class="img-responsive"></div><p></p>
<p>If you have several COM ports, use Windows Device Manager to figure out which
one is connected to the Application/User COM port of the kit with <code>host_test</code>
running. This is described above.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/dev_mgr_xds110_hosttest.png" alt="Device Manager" class="img-responsive"></div><p></p>
<p>2 – <strong>Scan for BLE devices</strong></p>
<p>After the device has finished initializing, the tabbed sections on the left
side of the GUI can be used to perform BLE functions. We will use these actions
to scan for and connect to our <code>Project Zero</code> device.</p>
<p>1) Choose the Discover/Connect tab</p>
<p>2) Select <code>Scan</code>. The log will keep you updated about the devices that are
found.</p>
<p>  </p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_adv_data.png" alt="" class="img-responsive"></div>
  <strong>Fig</strong> – <em>Scan report of Project Zero in BTool. Part of the advertisement is <code>LocalName</code>, marked in yellow.</em><p></p>
<p>3) In the Slave BDA drop-down menu, select the address of your device (from the
terminal output earlier)</p>
<p>4) Click Establish to connect</p>
<p>5) After you have connected, you will see an entry for the connected peripheral.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_gui.png" alt="BTool Interface" class="img-responsive"></div><p></p>
<p>After connecting, your serial window will look something like this:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/connect.gif" alt="Putty connected" class="img-responsive"></div><p></p>
<p>Note the <code>Peer address</code> is the address of the kit you used as the Central device.</p>
<p>You will also notice a new Connection Info section on the left side of the BTool
window:
</p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_connection_info.png" alt="Connection Info" class="img-responsive"></div><p></p>
<p>3 – <strong>Navigate the Attribute table</strong></p>
<p>Now that we are connected, we will want to perform a discovery to find all the
characteristics and services on our Project Zero device so that we can interact
with those attributes. A <code>UUID</code> tells the peer device how the value of an
attribute should be interpreted. You can learn more about attributes and UUIDs
in the <a href="../ble_01_custom_profile/ble_01_custom_profile.html">Custom Profile</a>
SimpleLink Academy module.</p>
<ul>
<li>Right-click on Handle under Connection Info.</li>
<li>Select Discover UUIDs</li>
</ul>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/discover_uuids.gif" alt="" class="img-responsive"></div><p></p>
<p>You will notice that the section under the log is populated with information
about the services and characteristics available on the device.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/discover_uuids_table.gif" alt="" class="img-responsive"></div><p></p>
<p>Jumping directly into the deep end of the pool, what you see in BTool
under the log after the discovery is complete is a visualization of what is
accessible to any connected GATT Client device via the Bluetooth Attribute
Protocol.</p>
<p>The only things reported over the air are <code>Handle</code>, which is a dynamic
short-form way of addressing an attribute and <code>Type</code> which tells you how to
interpret the <code>Value</code>, which is also available. Together, these three values
comprise an <code>Attribute</code>.</p>
<p>Each row in the image below is an <code>Attribute</code>. You will notice that some lines
are different colors. The reason for the difference colors is that the <code>Type</code>
imposes a hierarchy in the GATT protocol like this (simplified):</p>
<ul>
<li>reddish color – <em>0x2800</em> – <strong>Service declaration</strong> –
Value is the Service UUID.</li>
<li>yellowish color – <em>0x2803</em> – <strong>Characteristic declaration</strong> –
Value describes characteristic value attribute</li>
<li>white – <em>0xXXXX(-XXX...)</em> – <strong>Characteristic value attribute</strong>
– Value is actual data; all else is metadata.</li>
<li>white – <em>0x29xx</em> – <strong>Characteristic descriptors</strong> – Value is
info about characteristic value attribute.</li>
</ul>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_gatt_table.png" alt="Scanned devices" class="img-responsive"></div><p></p>
<p><strong>Fig</strong> – <em>GATT Table of Project Zero after reading all values (via right
click menu), including characteristic properties/permissions.</em></p>
<p>4 – <strong>Interact</strong></p>
<p>You may notice that some of the attributes do not have an associated value. In
order to populate that field for all attributes, you must manually read the values.</p>
<ul>
<li>Right-click on Handle under Connection Info.</li>
<li>Select Read Values</li>
</ul>
<p>Alternatively, you can single-click on a field in the Value column to read the
value for a single item.</p>
<p>Now that our GATT table is populated, we can start to interact with our Project
Zero device. The comments in the Value Description field instruct you on what
actions are allowed.</p>
<p>To write to a characteristic, double-click on the Value field and a new window
appears. By editing the Value and selecting Write Value, you can send a Write
Request.</p>
<p>For example, to turn on LED0 double click on the Value field that corresponds to
<code>LED0 State</code>. Writing one byte with a value higher than 00 will turn on the red
LED on the Project Zero LaunchPad.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_attribute_data_item.png" alt="Connection Info" class="img-responsive"></div><p></p>
<p>You can similarly interact with the Button and Data services.</p>
</div><div id="tab2-1" class="tab-pane "><p>1 – <strong>Start SimpleLink Starter</strong></p>
<p>Using your iOS device, find the SimpleLink Starter app and open it.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_app_icon.png" alt="App icon" class="img-responsive"></div><p></p>
<p>2 – <strong>Scan for BLE devices</strong></p>
<p>The app should begin scanning for BLE devices automatically but you can refresh
the list by pulling down.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_refresh_data.png" alt="" class="img-responsive"></div><p></p>
<p>You should see Project Zero advertising as "ProjectZero". Connect to the
device by clicking on the name and select <strong><em>Sensor&nbsp;View</em></strong> to get to the GUI
interface.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_menu.png" alt="" class="img-responsive"></div><p></p>
<p><strong>Fig</strong> – <em>Select <code>Sensor View</code> in this first step. Later you will use
<code>Service Explorer</code>.</em></p>
<p>After connecting, your serial window will look something like this:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/connect.gif" alt="Putty connected" class="img-responsive"></div><p></p>
<p><strong>Note</strong> the <code>Peer address</code> is the address of your mobile device.</p>
<p>3 – <strong>Use the GUI</strong></p>
<p>SimpleLink Starter is able to recognize the <code>UUIDs</code> for the services that
Project Zero is implementing, such as LED and Buttons, and displays GUI
widgets to interact with these services.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_gui.png" alt="" class="img-responsive"></div><p></p>
<p>4 – <strong>Navigate the Attribute table</strong></p>
<p>GUI is fun, but we can also explore the BLE services on a lower level. To do
that, go back from the GUI screen and long-press on <code>ProjectZero</code> to get a
menu.</p>
<p><span class="glyphicon glyphicon-hand-right gi-1p3x" style="margin-right: 0.3em"></span> Select <code>Service Explorer</code> in this menu.</p>
<p>Jumping directly into the deep end of the pool, what you are looking at is a
visualization of what is accessible to any connected GATT Client device via the
Bluetooth Attribute Protocol.</p>
<p>The only things reported over the air are <code>Handle</code>, which is a dynamic
short-form way of addressing an attribute and <code>Type</code> which tells you how to
interpret the <code>Value</code>, which is also available. Together, these three values
comprise an <code>Attribute</code>.</p>
<p>SimpleLink Starter uses the <code>Attribute</code> information and displays it in a more usable way.
SimpleLink Starter uses the <code>Type</code> that is sent to arrange the Attributes in a hierarchy
of characteristics and services as shown below:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_uuids_services.png" alt="SimpleLink Starter Project Zero UUIDs" class="img-responsive"></div><p></p>
<p><strong>Fig</strong> – <em>SimpleLink Starter list of GATT Services present in ProjectZero</em></p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_uuids_ledservice.png" alt="SimpleLink Starter Project Zero UUIDs" class="img-responsive"></div><p></p>
<p><strong>Fig</strong> – <em>List of characteristics in the LED Service. Notice the permissible actions are highlighted. Here Read/Write.</em></p>
<p><span class="glyphicon glyphicon-hand-right gi-1p3x" style="margin-right: 0.3em"></span> See the <a href="#custom_uuids">Custom Identifier list for Project Zero</a> below for how to interpret the custom UUDs</p>
<p>5 – <strong>Interact</strong></p>
<p>To interact with a characteristic using SimpleLink Starter, click on the Characteristic
UUID. Depending on which characteristic you clicked on, you will see something
similar to below:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_characteristic_view.png" alt="SimpleLink Starter Characteristic View" class="img-responsive"></div><p></p>
<p>The characteristic shown above has Write properties. To write a new value to a
characteristic with Write properties, click one of the "Write" items. In the
new window, edit the value using the keyboard given as shown.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_write_new_value.png" alt="SimpleLink Starter Write New Value" class="img-responsive"></div><p></p>
<p>When you are finished, click "Write" and you will be taken back to the
Characteristic view. A new value will be shown in the "Read characteristic" section as
seen below:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_characteristic_view.png" alt="" class="img-responsive"></div><p></p>
<p>6 – <strong>Advertisement Data</strong></p>
<p>Via the action menu you can also review the data that the device sends out
while it's waiting to be connected to.</p>
<p>In this case it's the <code>Local Name</code> and one of the services it has to offer.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_advdata.png" alt="SimpleLink Starter Write New Value" class="img-responsive"></div><p></p>
</div><div id="tab2-2" class="tab-pane "><p>1 – <strong>Start SimpleLink Starter</strong></p>
<p>Using your Android device, find the SimpleLink Starter app and open it.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/android_starter_icon.png" alt="App icon" class="img-responsive"></div><p></p>
<p>2 – <strong>Scan for BLE devices</strong></p>
<p>The app should begin scanning for BLE devices automatically but you can force
a refresh by pulling down on the device list.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/android_starter_devices.png" alt="Devices" class="img-responsive"></div><p></p>
<p>You should see Project Zero advertising as "Project Zero". Connect to the
device by clicking on it.</p>
<p>After connecting, your serial window will look something like this:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/connect.gif" alt="" class="img-responsive"></div><p></p>
<p><strong>Note</strong> the <code>Peer address</code> is the address of your mobile device.</p>
<p>3 – <strong>Interact</strong></p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/android_starter_gui.png" alt="Android SimpleLink Starter Connected" class="img-responsive"></div><p></p>
<p>The SimpleLink Starter application recognized the Project Zero services
(described below), and displays GUI widgets to interact. Tap on one of the
LEDs to change the state. It also automatically enables notifications on the
button states, and this is reflected in the button graph.</p>
</div></div></div></div><p><span id="custom_uuids"></span></p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Custom Identifier list (UUIDs) for Project Zero
</span></h4>
<p>In case the tool you use to view the Attribute Table on the device running
Project Zero does not have the meta-data to interpret the UUIDs to show you
descriptions and mnemonics, use this list to identify each service and
characteristic:</p>
<p>Keep in mind that some tools will show <code>Value</code> and <code>Type</code> fields in the
byte-order received over the air, which means for UUIDs that <code>F0001110-0451-4000-B000-000000000000</code>
becomes <code>00:00:00:00:00:00:00:B0:00:40:51:04:10:11:00:F0</code>.</p>
<style>table { font-size: smaller; }</style>

<table class="table table-striped table-bordered">
<thead>
<tr>
<th>UUID</th>
<th>Which ATT Field</th>
<th>Description</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>F000<code>1110</code>-0451-4000-B000-000000000000</td>
<td>Value</td>
<td>LED Service</td>
<td><em>Service declaration</em></td>
</tr>
<tr>
<td>F000<code>1111</code>-0451-4000-B000-000000000000</td>
<td>Type/Value</td>
<td>LED0 State</td>
<td>Read state or write 01 or 00.</td>
</tr>
<tr>
<td>F000<code>1112</code>-0451-4000-B000-000000000000</td>
<td>Type/Value</td>
<td>LED1 State</td>
<td>Read state or write 01 or 00.</td>
</tr>
<tr>
<td>F000<code>1120</code>-0451-4000-B000-000000000000</td>
<td>Value</td>
<td>Button Service</td>
<td><em>Service declaration</em></td>
</tr>
<tr>
<td>F000<code>1121</code>-0451-4000-B000-000000000000</td>
<td>Type/Value</td>
<td>BUTTON0 State</td>
<td>Read state or subscribe to notifications</td>
</tr>
<tr>
<td>F000<code>1122</code>-0451-4000-B000-000000000000</td>
<td>Type/Value</td>
<td>BUTTON1 State</td>
<td>Read state or subscribe to notifications</td>
</tr>
<tr>
<td>F000<code>1130</code>-0451-4000-B000-000000000000</td>
<td>Value</td>
<td>Data Service</td>
<td><em>Service declaration</em></td>
</tr>
<tr>
<td>F000<code>1131</code>-0451-4000-B000-000000000000</td>
<td>Type/Value</td>
<td>String char</td>
<td>Read/Write a long string</td>
</tr>
<tr>
<td>F000<code>1132</code>-0451-4000-B000-000000000000</td>
<td>Type/Value</td>
<td>Stream char</td>
<td>Send or receive WriteNoRsp/Notification</td>
</tr>
</tbody>
</table>
<p><strong>Table</strong> – <em>The UUIDs identifying ProjectZero services and
  characteristics.</em></p>
<p>For service and characteristic declarations you will find the UUID in the
ATT-Value field, and for characteristic value the UUID is in the ATT-Type
field.</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>ATT Type/UUID</th>
<th>GATT Type/UUID</th>
<th>Where to find the GATT UUID</th>
</tr>
</thead>
<tbody>
<tr>
<td> 0x2800</td>
<td>Service declaration</td>
<td>ATT Value field is GATT Service UUID</td>
</tr>
<tr>
<td> 0x2803</td>
<td>Characteristic declaration</td>
<td>ATT Value field, byte 3 onwards contains the UUID of the characteristic value</td>
</tr>
<tr>
<td>&lt;UUID&gt;</td>
<td>Characteristic value</td>
<td>ATT Type is the UUID of the GATT characteristic value</td>
</tr>
</tbody>
</table>
<p><strong>Table</strong> – <em>Where to find GATT UUIDs in the ATT Table.
  See the <a href="../ble_01_custom_profile/ble_01_custom_profile.html">Custom Profile</a>
  lab for more in-depth details</em></p>
</div>
<p><span id="custom_uuids_expandable1"></span></p>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-question-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Quiz-time
</span></h4>
<p>Use this GATT table from the <strong>Connecting using BTool</strong> section to answer the following
questions (You can enlarge the GATT table by clicking on it).</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_gatt_table.png" alt="Scanned devices" class="img-responsive"></div><p></p>
<p>What is the <code>ATT Handle</code> of the <strong>LED 1 Characteristic Declaration</strong> in the GATT
Table pictured above?</p>
<div class="quiz-toolbar"><div>
<input type="radio" id="q1.0" class="answer-wrong" name="quiz-1"><label for="q1.0" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; Primary Service Declaration. Everything between this handle and the next Primary Service Declaration belongs to the LED Service.&lt;/p&gt;
">0x0021 </label>
<input type="radio" id="q1.1" class="answer-wrong" name="quiz-1"><label for="q1.1" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; This is the LED0 State Characteristic Declaration.&lt;/p&gt;
">0x0022 </label>
<input type="radio" id="q1.2" class="answer-wrong" name="quiz-1"><label for="q1.2" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; This is the value of LED0 (LED0 State Value Characteristic Attribute)&lt;/p&gt;
">0x0023 </label>
<input type="radio" id="q1.3" class="answer-right" name="quiz-1"><label for="q1.3" class="quiz-label quiz-float">0x0024</label>
<input type="radio" id="q1.4" class="answer-wrong" name="quiz-1"><label for="q1.4" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; This is the &lt;strong&gt;value&lt;/strong&gt; of LED1 (LED1 State Value Characteristic Attribute), not its declaration.&lt;/p&gt;
">0x0025 </label>
</div></div>
<p>Where can you find a <strong>GATT Service UUID</strong>?</p>
<div class="quiz-toolbar"><div>
<input type="radio" id="q2.5" class="answer-right" name="quiz-2"><label for="q2.5" class="quiz-label quiz-float">ATT Value of a Service Declaration</label>
<input type="radio" id="q2.6" class="answer-wrong" name="quiz-2"><label for="q2.6" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; This is where you find the UUID of a &lt;strong&gt;Characteristic&lt;/strong&gt;&lt;/p&gt;
">ATT Value of a Characteristic Declaration </label>
<input type="radio" id="q2.7" class="answer-wrong" name="quiz-2"><label for="q2.7" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; This is where you find the value that you want to send or receive.&lt;/p&gt;
">ATT Value of a Characteristic Value attribute </label>
</div></div>
<p>What does the <code>Value</code> of a <strong>Characteristic Declaration</strong> tell you? Multiple correct answers.</p>
<div class="quiz-toolbar"><div>
<input type="checkbox" id="q3.8" class="answer-wrong" name="quiz-3" style="display:none;"><label for="q3.8" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; No, the UUID of the service containing the Characteristic can be found only if you know which ATT handle range each service has, and compare this with the ATT handle of a Characteristic handle&lt;/p&gt;
">UUID of the Service that contains it </label>
<input type="checkbox" id="q3.9" class="answer-right" name="quiz-3" style="display:none;"><label for="q3.9" class="quiz-label quiz-float">UUID of the Characteristic Value attribute</label>
<input type="checkbox" id="q3.10" class="answer-wrong" name="quiz-3" style="display:none;"><label for="q3.10" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; No. And what would be the point? That's the attribute one you are reading already if you are looking at its Value.&lt;/p&gt;
">Handle of the Characteristic Declaration </label>
<input type="checkbox" id="q3.11" class="answer-right" name="quiz-3" style="display:none;"><label for="q3.11" class="quiz-label quiz-float">Access properties of the Characteristic Value attribute</label>
<input type="checkbox" id="q3.12" class="answer-right" name="quiz-3" style="display:none;"><label for="q3.12" class="quiz-label quiz-float">Handle of the Characteristic Value attribute</label>
</div></div>
<p>How many <code>Attributes</code> does the <strong>LED Service</strong> consist of in total?</p>
<div class="quiz-toolbar"><div>
<input type="radio" id="q4.13" class="answer-wrong" name="quiz-4"><label for="q4.13" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; This is the number of GATT Characteristics in that Service. It is also the lowest prime number.&lt;/p&gt;
">2 </label>
<input type="radio" id="q4.14" class="answer-wrong" name="quiz-4"><label for="q4.14" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; This is the number of GATT meta-attributes such as Service- and Characteristic Declaration.&lt;/p&gt;
">3 </label>
<input type="radio" id="q4.15" class="answer-right" name="quiz-4"><label for="q4.15" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; Yes. Look again at the serial output during startup.&lt;/p&gt;
">5 </label>
</div></div>
</div>
<h2 class="body-heading" id="profiles-and-discovery">Profiles and Discovery<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#profiles-and-discovery"></a></h2><p>When a device connects to your device, it has no idea what you have to offer in
terms of Services and Characteristics it can interact with.</p>
<p>Emulation tools like BTool will discover and display everything available for
you to manipulate, but typically for most applications there will be a <code>Profile</code>.
This is a document that describes what interactions can be done via Bluetooth
low energy, which services are needed to accomplish various objectives, and how
value reads and writes must be formatted and sequenced for this to be done.</p>
<p>For example, a Heart Rate Monitor device would typically implement the <code>Heart
Rate Profile(HRP)</code>, which in turn specifies it must have the <code>Heart Rate
Service(HRM)</code> which must behave in a certain way when read from and written
to.</p>
<div class="alert alert-info float-right"><p> If you didn't know already, <strong>GATT</strong> imposes a meta-layer on top of <strong>ATT</strong>.
Meaning that an <strong>Attribute</strong> is an <strong>ATT</strong> thing, whereas a <strong>Service</strong> is a
<strong>GATT</strong> thing that uses <strong>Attributes</strong>.</p>
</div>
<p>Using an emulation tool, it is up to you to figure out which <code>attributes</code> should
be written or read in accordance with a <code>Profile</code> and manually act like a <code>GATT</code>
enabled application would have done.</p>
<p>Services and Characteristics are discovered after a connection is established
and before GATT interaction can start. This is done because the <code>handle</code> of an
<code>attribute</code> is what's used over the air on the ATT level to read/write, but
handles are dynamically assigned. The only thing a remote device knows before it
connects is the UUID of the services and characteristics it wants to use on the
peer.</p>
<h3 class="body-heading" id="health-thermometer-example">Health Thermometer example<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#health-thermometer-example"></a></h3><p>For example, you are a Health Thermometer Collector device and want to connect
to and use a health thermometer that follows the Bluetooth SIG adopted <code>Profile</code>
for <a href="https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=238687">Health Thermometer [PDF]</a>.</p>
<p>By reading the Bluetooth SIG specs, you know that the UUID of the
<a href="https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.service.health_thermometer.xml">Health Thermometer Service</a>
is 0x1809, and the UUID of the <a href="https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.temperature_measurement.xml">Temperature Measurement Characteristic</a>
is 0x2A1C.</p>
<p>You then discover the handles for these via defined procedures in order to
configure/read/write.</p>
<h1 class="body-heading" id="task-3-get-notified">Task 3 - Get Notified<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-3-get-notified"></a></h1><div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">If you are using a mobile device
</span></h4>
<p>This task is demonstrated using BTool because it provides the most thorough
GATT Table. Instructions on enabling notifications on your mobile device are
provided at the end of this task but you are strongly encouraged to go through
the BTool instructions for a better understanding of Bluetooth notifications.</p>
</div>
<p>You have connected. You have read and written values to control a Bluetooth
device and turned on and off LEDs. How about getting some data back from a
sensor on your device, like the state of the buttons?</p>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-question-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Reading things that change
</span></h4>
<p>Read the value of, let's say, <code>BUTTON0 State</code>. How is the value you read
correlated with the actual state of the button? How often would you have to read
the value out to make a reliable doorbell for example?</p>
<div class="quiz-toolbar"><div>
<input type="radio" id="q5.16" class="answer-right" name="quiz-5"><label for="q5.16" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; You can send a &lt;code&gt;Read Request&lt;/code&gt; only every third connection interval, because you must wait for a response each time. The minimum connection interval is 7.5ms. &lt;br/&gt;&lt;br/&gt; Unless you somehow latch the value of the latest button change in the characteristic until it's read, you are almost certainly going to miss a button press. And you will spend a lot of energy doing the polling.&lt;br/&gt;&lt;br/&gt;If only there was a better way...&lt;/p&gt;
">Very often, and not very well. </label>
</div></div>
</div>
<p>In this task you will learn how instead of polling the value you are
interested in, which could waste a lot of energy, you can configure the device
to transmit <span class="hinted" data-placement="auto top" data-toggle="tooltip" data-html="true" data-original-title="&lt;p&gt;Notifications are &lt;code&gt;ATT Handle Value
Notification&lt;/code&gt; messages sent from a &lt;code&gt;GATT Server&lt;/code&gt; when a value is updated. They
are sent without being polled first, but the &lt;code&gt;GATT Client&lt;/code&gt; must subscribe by
writing to the configuration attribute first.&lt;/p&gt;
"><code>Notifications</code></span> to you when the value changes.</p>
<p>When you are connected to a peripheral device conforming to the
<span class="hinted" data-placement="auto top" data-toggle="tooltip" data-html="true" data-original-title="&lt;p&gt;I just made that up. But there was actually some
thought behind how Project Zero services should be used.&lt;/p&gt;
"><code>Project Zero Profile</code></span>, this is possible to
do for the button states because of three things:</p>
<ol>
<li>The <code>properties</code> for each BUTTONx State Characteristic includes the
<code>GATT_PROP_NOTIFY</code> flag.</li>
<li>The BUTTONx State Characteristics include a <code>Client Characteristic
Configuration Descriptor</code> or <code>CCCD</code> attribute. Writing to this allows a <code>GATT Client</code> to
enable or disable <code>Notifications</code>.</li>
<li>The application cares about the value of the <code>CCCD Attribute</code> and also tries
to send a <code>Notification</code> when the state of the <code>Characteristic Value</code> changes.</li>
</ol>
<p>If we have a look at the <code>Button Service</code> in BTool things may become clearer:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_button_service.png" alt="CCCD" class="img-responsive"></div><p></p>
<p>In the figure above, the <code>Access Properties</code> of each <code>Characteristic Declaration</code>
can be seen in the left column. This is also signified by the "12" in leading byte
of the <code>Characteristic Declaration</code> Value. You will also notice there is a
<code>Client Characteristic Configuration</code> attribute that the LED service did not have.</p>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-question-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Characteristic Properties
</span></h4>
<p>Considering the value <code>0x12</code> for the <code>BUTTONx State</code> properties as seen above.
If you look at the list of properties in the code block below, what are the
properties of the Button characteristic value attributes? Several properties
are ORed together.</p>
<p>What are the access properties of the Button State characteristics?</p>
<div class="quiz-toolbar"><div>
<input type="checkbox" id="q6.17" class="answer-wrong" name="quiz-6" style="display:none;"><label for="q6.17" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; If enabled, the properties would be &lt;code&gt;0x12 | 0x01&lt;/code&gt; which is &lt;code&gt;0x13&lt;/code&gt;&lt;/p&gt;
">Broadcast </label>
<input type="checkbox" id="q6.18" class="answer-right" name="quiz-6" style="display:none;"><label for="q6.18" class="quiz-label quiz-float">Read</label>
<input type="checkbox" id="q6.19" class="answer-wrong" name="quiz-6" style="display:none;"><label for="q6.19" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; If enabled, the properties would be &lt;code&gt;0x12 | 0x04&lt;/code&gt; which is &lt;code&gt;0x16&lt;/code&gt;&lt;/p&gt;
">WriteNoRsp </label>
<input type="checkbox" id="q6.20" class="answer-wrong" name="quiz-6" style="display:none;"><label for="q6.20" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; If enabled, the properties would be &lt;code&gt;0x12 | 0x08&lt;/code&gt; which is &lt;code&gt;0x1A&lt;/code&gt;&lt;/p&gt;
">Write </label>
<input type="checkbox" id="q6.21" class="answer-right" name="quiz-6" style="display:none;"><label for="q6.21" class="quiz-label quiz-float">Notify</label>
<input type="checkbox" id="q6.22" class="answer-wrong" name="quiz-6" style="display:none;"><label for="q6.22" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; If enabled, the properties would be &lt;code&gt;0x12 | 0x20&lt;/code&gt; which is &lt;code&gt;0x32&lt;/code&gt;&lt;/p&gt;
">Indicate </label>
<input type="checkbox" id="q6.23" class="answer-wrong" name="quiz-6" style="display:none;"><label for="q6.23" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; If enabled, the properties would be &lt;code&gt;0x12 | 0x40&lt;/code&gt; which is &lt;code&gt;0x62&lt;/code&gt;&lt;/p&gt;
">Signed writes </label>
</div></div>
</div>
<h2 class="body-heading" id="access-properties">Access Properties<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#access-properties"></a></h2><p>Each characteristic has properties, which are made known in its declaration via
a bit-map. The list below is an excerpt from the definitions in the SimpleLink
CC26X2 SDK.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_1')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_1" class="lang-c hljs cpp"><span class="hljs-comment">/** @defgroup GATT_PROP_BITMAPS_DEFINES GATT Characteristic Properties Bit Fields
 * @{
 */</span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_BCAST         0x01 <span class="hljs-comment">//!&lt; Permits broadcasts of the Characteristic Value</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_READ          0x02 <span class="hljs-comment">//!&lt; Permits reads of the Characteristic Value</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_WRITE_NO_RSP  0x04 <span class="hljs-comment">//!&lt; Permits writes of the Characteristic Value without response</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_WRITE         0x08 <span class="hljs-comment">//!&lt; Permits writes of the Characteristic Value with response</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_NOTIFY        0x10 <span class="hljs-comment">//!&lt; Permits notifications of a Characteristic Value without acknowledgement</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_INDICATE      0x20 <span class="hljs-comment">//!&lt; Permits indications of a Characteristic Value with acknowledgement</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_AUTHEN        0x40 <span class="hljs-comment">//!&lt; Permits signed writes to the Characteristic Value</span></span>
<span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GATT_PROP_EXTENDED      0x80 <span class="hljs-comment">//!&lt; Additional characteristic properties are defined in the Characteristic Extended Properties Descriptor</span></span>
<span class="hljs-comment">/** @} End GATT_PROP_BITMAPS_DEFINES */</span>
</code></pre><span class="code-title"><p>Snippet from gattservapp.h</p>
</span></div></div>
<h2 class="body-heading" id="client-characteristic-configuration">Client Characteristic Configuration<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#client-characteristic-configuration"></a></h2><p>The behavior and usage of attributes with the type <code>0x2902</code> is defined by the
Bluetooth Specification. Luckily, it's not very complicated.</p>
<p>The <code>Value</code> of the attribute is a 16-bit wide field. Writing <code>01:00</code>, which can
be translated to <code>0x0001</code>, will tell the device that it's allowed to send
<code>Notifications</code> of value changes to you. If you write <code>00:00</code> you disable
transmissions. If you write <code>02:00</code> you allow <code>Indications</code> instead. That is not
 permitted for the button characteristics.</p>
<div class="alert alert-warning "><p>Notifications are enabled a little bit differently in the mobile devices.</p>
<p>For SimpleLink Starter, in the characteristic view, click "Set notify state".</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/ios_starter_notification.png" alt="iOS Notifications" class="img-responsive"></div><p></p>
</div>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-question-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Quiz!
</span></h4>
<p>Looking at this table from <strong>Task 3 - Get Notified</strong>, what is the <code>Handle</code> of the <code>CCCD</code> attribute for <code>BUTTON1 State</code> characteristic?</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/btool_button_service.png" alt="CCCD" class="img-responsive"></div><p></p>
<div class="quiz-toolbar"><div>
<input type="radio" id="q7.24" class="answer-wrong" name="quiz-7"><label for="q7.24" class="quiz-label quiz-float">0x0029</label>
<input type="radio" id="q7.25" class="answer-wrong" name="quiz-7"><label for="q7.25" class="quiz-label quiz-float">0x002A</label>
<input type="radio" id="q7.26" class="answer-wrong" name="quiz-7"><label for="q7.26" class="quiz-label quiz-float">0x002B</label>
<input type="radio" id="q7.27" class="answer-right" name="quiz-7"><label for="q7.27" class="quiz-label quiz-float">0x002C</label>
</div></div>
<p>What is the client configuration of each Button state? Two correct answers.</p>
<div class="quiz-toolbar"><div>
<input type="checkbox" id="q8.28" class="answer-wrong" name="quiz-8" style="display:none;"><label for="q8.28" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; CCCD with handle 0x0029 has value &lt;code&gt;00:00&lt;/code&gt;, so is off.&lt;/p&gt;
">BUTTON0: Noti enabled </label>
<input type="checkbox" id="q8.29" class="answer-right" name="quiz-8" style="display:none;"><label for="q8.29" class="quiz-label quiz-float">BUTTON0: Noti disabled</label>
<input type="checkbox" id="q8.30" class="answer-wrong" name="quiz-8" style="display:none;"><label for="q8.30" class="quiz-label quiz-float" data-toggle="tooltip" data-html="true" data-container="body" data-placement="auto top" data-trigger="click" title="" data-original-title="&lt;p&gt; CCCD with handle 0x002C has value &lt;code&gt;00:00&lt;/code&gt;, so is off.&lt;/p&gt;
">BUTTON1: Noti enabled </label>
<input type="checkbox" id="q8.31" class="answer-right" name="quiz-8" style="display:none;"><label for="q8.31" class="quiz-label quiz-float">BUTTON1: Noti disabled </label>
</div></div>
</div>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-hand-right gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Action!
</span></h4>
<ul>
<li>Enable notifications for both BUTTON0 and BUTTON1.</li>
<li>Try to press the buttons.</li>
<li>Observe serial output and the value apparent in the GUI. Can you follow the sequence of events in the code?</li>
</ul>
</div>
<h1 class="body-heading" id="task-4-customize-the-application">Task 4 - Customize the Application<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-4-customize-the-application"></a></h1><p>This task teaches you to customize how the device appears to the outside, to
make it more personal.</p>
<p>There are three main ways you can set your mark on the device:</p>
<ul>
<li>The <code>GAP_ADVTYPE_LOCALNAME_(SHORT|COMPLETE)</code> field in either AdvData or
Scan Response.</li>
<li>The <code>Device Name</code> Characteristic in the <code>Generic Access Service</code>, and</li>
<li>Various strings in the <code>Device Information Service</code></li>
</ul>
<p>The <code>GAP_ADVTYPE_LOCALNAME</code> is the field that is displayed by most end-equipment
when scanning for Bluetooth devices, and it's that field we'll change now. After
a connection is established, and the Service Discovery is complete, many types
of end-equipment will then use the value from <code>Device Name</code> for display.</p>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-hand-right gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Read the Device Name
</span></h4>
<p>Using BTool or your BLE Central device of choice, find the service called
<code>Generic Access Service (UUID 0x2800)</code>, expand it if necessary to find <code>Device
Name (UUID 0x2A00)</code>, and then read this value, if not done already.</p>
</div>
<h2 class="body-heading" id="change-the-advertisement-data">Change the Advertisement data<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#change-the-advertisement-data"></a></h2><p>The two variables <code>advertData</code> and <code>scanRspData</code> contain the data the device
will transmit while advertising its existence. This data is available to any
interested parties so they can see the device and connect to it.</p>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-hand-right gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Change LOCAL_NAME
</span></h4>
<p>In <code>project_zero.c</code>, find the array called <code>advertData</code>
(search via <kbd>Ctrl+F</kbd>) and modify the nugget <code>LOCAL_NAME_COMPLETE</code> of
<code>advertData</code> to broadcast a name you like better than the original.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_2')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_2" class="lang-c hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint8_t</span> advertData[] =
{
  <span class="hljs-comment">/* ... */</span>
  <span class="hljs-comment">// Complete name</span>
  <span class="hljs-number">10</span>,                               <span class="hljs-comment">// length of this nugget including flag byte.</span>
  GAP_ADTYPE_LOCAL_NAME_COMPLETE,   <span class="hljs-comment">// identifier for this nugget</span>
  <span class="hljs-string">'S'</span>, <span class="hljs-string">'p'</span>, <span class="hljs-string">'i'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'r'</span>, <span class="hljs-string">'P'</span>, <span class="hljs-string">'i'</span>, <span class="hljs-string">'g'</span>,
  <span class="hljs-comment">/* ... */</span>
}
</code></pre><span class="code-title"><p>Example LOCAL_NAME modification. Note length field.</p>
</span></div></div>
<p>When you have done this, right-click on the Project Zero App project and select
<code>Build Project</code>. When this is completed, download to the target, run the changed
code and observe that when you scan for Bluetooth Devices, the name has changed.
The change will also show up in the serial output.</p>
<div class="alert alert-warning "><p> Note that some mobile devices have a tendency to cache previously known
device names and may not update yours. In order to see your new device name,
look up how to clear the Bluetooth cache on your mobile device. Often it's a
matter of disabling Bluetooth in the system menu and re-enabling it.</p>
</div>
</div>
<div class="bs-callout bs-callout-success "><h4><span class="glyphicon glyphicon-ok-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">That's it!
</span></h4>
<p>Very well done! For adventure's sake, you can also change the <code>Device Name</code> value.</p>
<p>Find the function call <code>GGS_SetParameter(GGS_DEVICE_NAME_ATT, ...)</code> in the
function <code>project_zero.c::ProjectZero_init()</code> and modify the contents of the
array being pointed to.</p>
</div>
<div align="center" style="margin-top: 4em; font-size: smaller;">
<a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="../../../web_support/cc_license_icon.png"></a><br>This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.</div>

</div><div class="col-xs-4 col-sm-2 sidebar-offcanvas bs-docs-sidebar hidden-print" id="sidebar-overview"><ul class="nav nav-stacked fixed" id="sidebar"><li><a href="#introduction">Introduction</a></li><li><a href="#prerequisites">Prerequisites</a><ul class="nav nav-stacked"><ul class="nav nav-stacked"><li><a href="#software-for-desktop-development">Software for desktop development</a></li><li><a href="#hardware">Hardware</a></li><li><a href="#recommended-reading">Recommended reading</a></li></ul></ul></li><li><a href="#getting-started-ndash-desktop">Getting started – Desktop</a><ul class="nav nav-stacked"><li><a href="#install-the-software">Install the software</a></li></ul></li><li><a href="#task-1-ndash-run-projectzero-project">Task 1 – Run ProjectZero project</a><ul class="nav nav-stacked"><li><a href="#import-in-ccs-desktop">Import in CCS Desktop</a></li><li><a href="#connect-cc26x2r-launchpad">Connect CC26X2R LaunchPad</a></li><li><a href="#configure-the-debugger-connection">Configure the debugger connection</a></li><li><a href="#connect-a-terminal-program">Connect a terminal program</a></li><li><a href="#build-the-projects-and-flash-the-device">Build the projects and Flash the device</a><ul class="nav nav-stacked"><li><a href="#cc26xxr1lp_bim_offchip">cc26xxr1lp_bim_offchip</a></li><li><a href="#ble5_project_zero_cc26x2r1lp_app">ble5_project_zero_cc26x2r1lp_app</a></li></ul></li></ul></li><li><a href="#task-2-connect-and-navigate-exposed-services">Task 2 - Connect and navigate exposed services</a><ul class="nav nav-stacked"><li><a href="#profiles-and-discovery">Profiles and Discovery</a><ul class="nav nav-stacked"><li><a href="#health-thermometer-example">Health Thermometer example</a></li></ul></li></ul></li><li><a href="#task-3-get-notified">Task 3 - Get Notified</a><ul class="nav nav-stacked"><li><a href="#access-properties">Access Properties</a></li><li><a href="#client-characteristic-configuration">Client Characteristic Configuration</a></li></ul></li><li><a href="#task-4-customize-the-application">Task 4 - Customize the Application</a><ul class="nav nav-stacked"><li><a href="#change-the-advertisement-data">Change the Advertisement data</a></li></ul></li></ul></div></div></div></div>




<link rel="stylesheet" href="../../../web_support/highlight/styles/zenburn.css">
<script src="../../../web_support/strapdown/vendor/jquery-1.11.2.min.js"></script>
<script src="../../../web_support/strapdown/vendor/bootstrap.min.js"></script>
<script src="../../../web_support/highlight/highlight.pack.js"></script>
<script type="text/javascript">document.isPreRendered = true;</script><script src="../../../web_support/strapdown/v/0.2/strapdown.js"></script>      <div class="modal" id="imagemodal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">        <div class="vertical-alignment-helper">          <div class="modal-dialog vertical-align-center">             <div class="modal-dialog">               <div class="modal-content" style="margin-left: auto;margin-right: auto;">                 <div class="modal-body">                   <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>                   <img src="" class="imagepreview img-responsive">                 </div>              </div>            </div>          </div>        </div>      </div>


</body></html>